from loguru import logger
import os
import pandas as pd

from giskard import Dataset, Model, scan
from giskard.llm import set_llm_model, set_embedding_model
from giskard.testing.tests.llm import (
    test_llm_output_plausibility,
    test_llm_char_injection,
    test_llm_ground_truth_similarity,
    test_llm_correctness,
    test_llm_single_output_against_requirement,
)

from chatbot import Chatbot
from settings import OUTPUT_FOLDER, IPCC_REPORT_URL, PROMPT_TEMPLATE, SAMPLE_VECTORSTORE_PATH, SAMPLE_QA_PATH, TOKENIZERS_PARALLELISM

os.environ["TOKENIZERS_PARALLELISM"] = TOKENIZERS_PARALLELISM

set_llm_model("mistral/mistral-large-latest")
set_embedding_model("mistral/mistral-embed")

def create_dataset(number_of_rows: int = 3):
    df = pd.read_csv(SAMPLE_QA_PATH)

    df_last_rows = df.tail(number_of_rows)

    wrapped_dataset = Dataset(
        name="Test Data Set", df=df_last_rows, target="expected_answer"
    )

    return wrapped_dataset

def create_mini_dataset():
    examples = [
        "Is sea level rise avoidable? When will it stop?",
    #    "What are the benefits of climate action for human health?",
    #    "What is the importance of equity in climate action?",
    #    "How can climate governance support effective climate action?",
    #    "What is the role of technology in climate mitigation and adaptation?"
    ]
    mini_dataset = Dataset(pd.DataFrame({"question": examples}), target=None)

    return mini_dataset



if __name__ == "__main__":
    bot = Chatbot(
        pdf=IPCC_REPORT_URL,
        prompt_template=PROMPT_TEMPLATE,
        local=False,
        output_folder=OUTPUT_FOLDER,
    )
    giskard_model = Model(
        model=bot.predict,
        model_type="text_generation",
        name="Climate Change Question Answering",
        description="This model answers any question about climate change based on IPCC reports",
        feature_names=["question"],
    )


    giskard_dataset = create_dataset()

    html_path = OUTPUT_FOLDER / "scan_report.html"
    logger.info(f"Exporting to {html_path}")

    #full_report = scan(giskard_model, giskard_dataset, only=["hallucination"])

    full_report = scan(giskard_model, giskard_dataset, only=["hallucination", "text_generation"])

    full_report.to_html(filename=html_path, embed=False)
    logger.info(f"Exported to {html_path}")

    json_path = OUTPUT_FOLDER / "scan_report.json"
    full_report.to_json(filename=json_path)
    logger.info(f"Exported to {json_path}")

    md_path = OUTPUT_FOLDER / "scan_report.md"
    full_report.to_markdown(filename=md_path, template="huggingface")
    logger.info(f"Exported to {md_path}")


    #test_suite = full_report.generate_test_suite(name="Test suite generated by scan")
    #test_suite.run()
